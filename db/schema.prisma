// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

// --------------------------------------

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  email           String   @unique
  isEmailVerified Boolean?
  avatar          String?
  hashedPassword  String?
  role            Role     @default(USER)
  hasCreatedPage  Boolean  @default(false)
  provider        String?

  tokens          Token[]
  sessions        Session[]
  likedBlocks     LikedBlock[]
  usedBlocks      UsedBlock[]
  pages           Page[]
  supportMessages SupportMessage[]
}

model Session {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model BuildingBlock {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String?
  type       String
  filterType String?
  editType   String?
  props      Json?
  hidden     Boolean  @default(true)

  LikedBlocks LikedBlock[]
  UsedBlocks  UsedBlock[]
}

model Page {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  data          String
  theme         String   @default("inherit")
  isPublished   Boolean  @default(false)
  customID      String?  @unique
  template      String?
  themeSettings Json?
  previewImage  String?
  feedType      String?  @default("All")
  tags          String[]

  appliedForTemplates Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
}

model LikedBlock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  buildingBlock   BuildingBlock @relation(fields: [buildingBlockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingBlockId String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String        @db.ObjectId

  @@unique([userId, buildingBlockId])
}

model UsedBlock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buildingBlock   BuildingBlock @relation(fields: [buildingBlockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingBlockId String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String        @db.ObjectId

  @@unique([userId, buildingBlockId])
}

model SupportMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String
  subject   String
  message   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
}
